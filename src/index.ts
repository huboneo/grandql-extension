import neo4j from 'neo4j-driver';
// @ts-ignore
import {makeAugmentedSchema} from 'neo4j-graphql-js';
import {ApolloServer} from 'apollo-server-express';
import {HttpAdapterHost} from '@nestjs/core';
import {Inject, Module, OnModuleInit} from '@nestjs/common';
import {SystemModule, SystemProvider} from '@relate/common';

import {typeDefs} from './graphql-schema';

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

@Module({
    imports: [SystemModule],
})
export default class GrandModule implements OnModuleInit {
    constructor(
        @Inject(HttpAdapterHost) private readonly httpAdapterHost: HttpAdapterHost,
        @Inject(SystemProvider) private readonly systemProvider: SystemProvider
    ) {
    }

    async onModuleInit() {
        if (!this.httpAdapterHost) {
            return;
        }

        const {httpAdapter} = this.httpAdapterHost;
        const app = httpAdapter.getInstance();
        const schema = makeAugmentedSchema({
            typeDefs,
        });
        const defaultAccount = await this.systemProvider.getAccount();
        const dbmss = await defaultAccount.listDbmss();

        return Promise.all(dbmss.map(async (dbms) => {
            /*
             * Create a Neo4j driver instance to connect to the database
             * using credentials specified as environment variables
             * with fallback to defaults
             */
            const boltPort = dbms.config.get('dbms.connector.bolt.advertised_address') || ':7687'
            const uri = `neo4j://127.0.0.1${boltPort}`;
            const principal = 'neo4j';
            const credentials = await this.systemProvider.getAccessToken(defaultAccount.id, dbms.id, principal);
            const driver = neo4j.driver(
                uri,
                neo4j.auth.basic(
                    principal,
                    credentials,
                ),
            );

            /*
             * Create a new ApolloServer instance, serving the GraphQL schema
             * created using makeAugmentedSchema above and injecting the Neo4j driver
             * instance into the context object so it is available in the
             * generated resolvers to connect to the database.
             */
            const server = new ApolloServer({
                context: {driver},
                schema: schema,
                introspection: true,
                playground: true,
            });

            server.applyMiddleware({app, path: `/grandql/${dbms.name}`});
        }))
    }
}
